# Модуль FireAnaliz с функциями для обработки текста отчета версия от 09.12.2021
import pandas as pd
import numpy as np
decl = pd.read_csv('declension.csv', encoding='UTF-8')

def Dl(n, word, param = ''): #  склонение слов в зависимости от числительного
    '''Склонение слова в зависимости от значения числительного. В параметрах функции указывается число, затем слово и необязательный параметр. Если необязательный параметр пропущен, то функция вернет только слово в нужном склонении. Функция учитывает наличие заглавной буквы в начале слова и после обработке вернет слово с заглавной или строчной буквой, какая была получена на входе. 
	Все словоформы хранятся в файле declension.csv, который должен находиться в рабочей папке. Содержимое файла можно править, только необходимо следить, чтоб кодировка  файла оставалась совместимой.
	Приме вызова функции:
	Dl(20, "пожар") вернет - пожаров
	Dl(20, "пожар", 1) вернет - 20 пожаров'''
    w1, s, ns = 0, '', ''
    w0 = word[0]  # первая буква слова
    word = word.lower() # преобразование строки к нижнему регистру
    
    for i in range(0, len(decl)):
        if (decl['0'][i]==word) or (decl['1'][i]==word) or (decl['2'][i]==word):
            if param != '':
                ns = F(n) + ' '
            
            w1, n1, n2 = i, n % 10, n // 10 % 10
            
            if n1 == 1 and n2 != 1: 
                s = decl['0'][i]
            elif n1 in (2, 3, 4) and n2 != 1: 
                s = decl['1'][i]
            else: 
                s = decl['2'][i]
    
    if s == '': s = '<Ошибка: Такого слова нет в словаре!>'
    if w0 == s[0]:
        s = ns + s
    else:
        s = ns + s.capitalize()  # капитализация первого символа
    
    return s 

def tr(d1, d2, Percent = ''):  # вычисление прироста
    '''Функция вычисляет прирост текущего значения d2 к базовому d1 по формуле (d2 – d1) / d1 × 100 %. Если третий параметр не указан, возвращается только значение прироста. Если указан третий параметр, то к значению прироста добавляется знак процента или в зависимости от величины результата указывается кратность d2 к d1.
Имеет следующие параметры:
d1 –  базовое значение;
d2 – текущее значение;
Percent – необязательный параметр – определяет необходимость формата возвращаемого функцией результата. Если percent не равен NaN, то к выводимому значению добавляется знак % или другое пояснение в зависимости от величины прироста.
'''
    if (d1 == 0) and (d2 != 0): s1 = '+'
    if (d1 == 0) and (d2 == 0): s1 = 'уров.'    
    if (d1 != 0) and (d2 == 0): s1 = '-'    
    if (d1 != 0) and (d2 != 0): 
        s = round((d2 - d1) / d1 * 100, 1)
        if Percent == '':
            s1 = s
        else:
            s1 = (str(s) + '%').replace('.', ',')
        if s > 100: s1 = '+в ' + str(round(d2/d1, 1)).replace('.', ',') + ' раза'
        if s == 0: s1 = 'уров.'
    return s1

def trD(d1, d2, Trend):  # вычисление прироста и добавление пояснения
    '''Производит вычисления прироста аналогично функции tr(). Дополнительно к возвращаемому функцией значению прибавляется соответствующее поясняющее слово, выбираемое из значения параметра s.
Имеет следующие параметры:
d1 –  базовое значение;
d2 – текущее значение;
Trend – обязательный параметр – варианты пояснения результата. Например, 'снижение-рост'. Слова должны быть разделены символом тире, первое слово выбирается при снижении показателя, второе, соответственно при росте.
'''
    s = Trend.split('-')
    d = tr(d1, d2)
    
    if isinstance(d, str):
        if d == 'уров.': s1 = 'остается на уровне прошлого года'
        else: s1 = s[1] + ' в ' + str(round(d2/d1, 1)).replace('.', ',') + ' раза'
        
    else: 
        if d1 > d2: s1 = s[0] 
        else: s1 = s[1]
        s1 += ' на ' + str(abs(d)).replace('.', ',') + '%'
    
    return s1

def Dmg(d, Ed=''): # форматирование результатов денежных вычислений
    '''Функция форматирует результаты денежных вычислений, округляя их до наибольшего разряда.
Имеет следующие параметры:
d – сумма денег;
Ed – единица измерения, допускаются следующие значения: «тыс.», «млн» и «млрд», которые сообщают функции, что сумма указана в тысячах, миллионах или миллиардах рублей. Если значение Ed не указано, то по умолчанию принимается, что сумма указана в рублях.
'''
    s = ''
    if (Ed == 'тыс') or (Ed == 'тыс.'): d *= 1000
    if (Ed == 'млн') or (Ed == 'млн.'): d *= 1e6 
    if (Ed == 'млрд') or (Ed == 'млрд.'): d *= 1e9 
    
    if d < 1e3: s = str(d) + ' руб.'
    if d >= 1e3: s = str(round(d/1000, 1)).replace('.', ',') + ' тыс. руб.'    
    if d >= 1e6: s = str(round(d/1e6, 1)).replace('.', ',') + ' млн руб.' 
    if d >= 1e9: s = str(round(d/1e9, 1)).replace('.', ',') + ' млрд руб.'
    return s
  
def F(x): # разделить число на разряды
    '''Если у числа есть дробная часть, то число округляется до первого знака после запятой, а десятичная точка заменяется на запятую.
Если на входе функции получена строка, то она оставляется без обработки.
При необходимости добавляются пробелы для разделения групп десятичных разрядов числа    
'''
    if (isinstance(x, str)) and (x[:x.find('.')].isdigit()):
        x = float(x)
    if isinstance(x, str): 
        s = x
    else:
        if x == round(x): x = int(x)
        else: x = round(x, 1)
            
        s = '{0:,}'.format(x).replace(',', ' ')
        s = s.replace('.', ',')
    return s

def MultipleValues(n, ns):  # форматирование списка значений по образцу - первый, второй и третий
    '''Если аргумент n получает на входе серию значений, то формируется строка с перечислением всех значений серии через запятую, а перед последним значением вставляется союз «и».
	Тип первого параметра обязательно должен быть типа Series
	Второй параметр - варианты текста для постфикса, обязательно с разделением тире, например "году-годах"'''
    ns, s = ns.split('-'), ''
    
    if len(n) > 1:
        for i in range(len(n)):
           s += str(n.iat[i]) + ', '
        s = s[:len(s)-2] + ' ' # удаление лишней запятой в конце строки
        s += ns[1]  # добавление слова
        x = s.rindex(',')
        s = s[:x] + ' и' + s[x+1:]
    else:
        s = str(int(n)) + ' ' + ns[0]
    return s

def maxNumber(s):
    '''Порядковый номер элемента серии с максимальным значением
    '''
    m = mi = 0
    for i in range(len(s)):
        if m < s.values[i]:
            m = s.values[i]
            mi = i
    return mi

# Код региона STP, в Регионе, Полное название региона, Статус региона, Федеральный округ
Region = {
        'адыг'    :  [1179, 'Адыгея', 'Республика Адыгея', 10001, 3130], 
        'алтай'   :  [1184, 'Алтай',  'Республика Алтай', 10002, 7165], 
        'башк'    :  [1180, 'Башкортостан', 'Республика Башкортостан', 10003, 5145], 
        'бурят'   :  [1181, 'Бурятия',  'Республика Бурятия', 10004, 8178], 
        'даг'     :  [1182, 'Дагестан', 'Республика Дагестан', 10005, 4138], 
        'ингуш'   :  [1174, 'Ингушетия', 'Ингушская Республика', 10006, 4139], 
        'кабар'   :  [1183, 'Кабардино-Балкария', 'Кабардино-Балкарская Республика', 10007, 4140], 
        'кбр'     :  [1183, 'Кабардино-Балкария', 'Кабардино-Балкарская Республика', 10007, 4140], 
        'калмык'  :  [1185, 'Калмыкия', 'Республика Калмыкия', 10008, 3131], 
        'карач'   :  [1191, 'Карачаево-Черкесия', 'Карачаево-Черкесская Республика', 10009, 4141], 
        'кчр'     :  [1191, 'Карачаево-Черкесия', 'Карачаево-Черкесская Республика', 10009, 4141], 
        'карел'   :  [1186, 'Карелия', 'Республика Карелия', 10010, 2119], 
        'коми'    :  [1187, 'Коми', 'Республика Коми', 10011, 2120], 
        'крым'    :  [1162, 'Крым', 'Республика Крым', 10012, 3132], 
        'мари'    :  [1188, 'Марий Эл', 'Республика Марий Эл', 10013, 5146], 
        'морд'    :  [1189, 'Мордовия', 'Республика Мордовия', 10014, 5147], 
        'якут'    :  [1198, 'Саха (Якутия)', 'Республика Саха (Якутия)', 10015, 8177], 
        'осет'    :  [1190, 'Северная Осетия - Алания', 'Республика Северная Осетия - Алания', 10016, 4142], 
        'алания'  :  [1190, 'Северная Осетия - Алания', 'Республика Северная Осетия - Алания', 10016, 4142], 
        'татар'   :  [1192, 'Татарстан', 'Республика Татарстан', 10017, 5148], 
        'тыва'    :  [1193, 'Тыва', 'Республика Тыва', 10018, 7167], 
        'удму'    :  [1194, 'Удмуртия', 'Удмуртская Республика', 10019, 5149], 
        'хакас'   :  [1195, 'Хакасия', 'Республика Хакасия', 10020, 7168], 
        'чечен'   :  [1196, 'Чечня', 'Чеченская Республика', 10021, 4143], 
        'чечня'   :  [1196, 'Чечня', 'Чеченская Республика', 10021, 4143],     
        'чуваш'   :  [1197, 'Чувашия', 'Чувашская Республика', 10022, 5150], 
        'алтайс'  :  [1101, 'Алтайском', 'Алтайский край', 20001, 7269], 
        'заба'    :  [1176, 'Забайкальском', 'Забайкальский край', 20002, 8277],
        'читин'   :  [1176, 'Читинской', 'Читинская область', 30047, 8277], 
        'агинск'  :  [1176, 'Агинском-Бурятском', 'Агинский-Бурятский автономный округ', 60006, 7270],     
        'камчат'  :  [1130, 'Камчатском', 'Камчатский край', 20003, 8278], 
        'краснод' :  [1103, 'Краснодарском', 'Краснодарский край', 20004, 3233], 
        'красноя' :  [1104, 'Красноярском', 'Красноярский край', 20005, 7271], 
        'перм'    :  [1157, 'Пермском', 'Пермский край', 20006, 5251], 
        'примор'  :  [1105, 'Приморском', 'Приморский край', 20007, 8279], 
        'ставр'   :  [1107, 'Ставропольском', 'Ставропольский край', 20008, 4244], 
        'хабар'   :  [1108, 'Хабаровском', 'Хабаровский край', 20009, 8280], 
        'амур'    :  [1110, 'Амурской', 'Амурская область', 30001, 8381], 
        'архан'   :  [1111, 'Архангельской', 'Архангельская область', 30002, 2321], 
        'астраха' :  [1112, 'Астраханской', 'Астраханская область', 30003, 3334], 
        'белгор'  :  [1114, 'Белгородской', 'Белгородская область', 30004, 1301], 
        'брянск'  :  [1115, 'Брянской', 'Брянская область', 30005, 1302], 
        'владим'  :  [1117, 'Владимирской', 'Владимирская область', 30006, 1303], 
        'волгогр' :  [1118, 'Волгоградской', 'Волгоградская область', 30007, 3335], 
        'вологод' :  [1119, 'Вологодской', 'Вологодская область', 30008, 2322], 
        'ворон'   :  [1120, 'Воронежской', 'Воронежская область', 30009, 1304], 
        'иван'    :  [1124, 'Ивановской', 'Ивановская область', 30010, 1305], 
        'ирк'     :  [1125, 'Иркутской', 'Иркутская область', 30011, 7372], 
        'орды'    :  [1125, 'Усть-Ордынском Бурятком', 'Усть-Ордынский Буряткий автономный округ', 60009, 7372],     
        'калинин' :  [1127, 'Калининградской', 'Калининградская область', 30012, 2323], 
        'калуж'   :  [1129, 'Калужской', 'Калужская область', 30013, 1306], 
        'кем'     :  [1132, 'Кемеровской', 'Кемеровская область', 30014, 7373], 
        'киров'   :  [1133, 'Кировской', 'Кировская область', 30015, 5352], 
        'омск'    :  [1152, 'Омской', 'Омская область', 30027, 7375], # Омская область обязательно должна стоять перед Костромской
        'костр'   :  [1134, 'Костромской', 'Костромская область', 30016, 1307], 
        'кург'    :  [1137, 'Курганской', 'Курганская область', 30017, 6359], 
        'курск'   :  [1138, 'Курской', 'Курская область', 30018, 1308], 
        'ленинг'  :  [1141, 'Ленинградской', 'Ленинградская область', 30019, 2324], 
        'липец'   :  [1142, 'Липецкой', 'Липецкая область', 30020, 1309], 
        'магад'   :  [1144, 'Магаданской', 'Магаданская область', 30021, 8382], 
        'москве'  :  [1145, 'Москве', 'г. Москва', 40001, 40001],     
        'москов'  :  [1146, 'Московской', 'Московская область', 30022, 1310], 
        'мурм'    :  [1147, 'Мурманской', 'Мурманская область', 30023, 2325], 
        'нижег'   :  [1122, 'Нижегородской', 'Нижегородская область', 30024, 5353], 
        'новгоро' :  [1149, 'Новгородской', 'Новгородская область', 30025, 2326], 
        'hовгоро' :  [1149, 'Новгородской', 'Новгородская область', 30025, 2326],  # на EMIS было такое написание региона
        'новосиб' :  [1150, 'Новосибирской', 'Новосибирская область', 30026, 7374], 
        'оренб'   :  [1153, 'Оренбургской', 'Оренбургская область', 30028, 5354], 
        'орл'     :  [1154, 'Орловской', 'Орловская область', 30029, 1311], 
        'пенз'    :  [1156, 'Пензенской', 'Пензенская область', 30030, 5355], 
        'пермя'   :  [1157, 'Коми-Пермяцком', 'Коми-Пермяцкий автономный округ', 60007, 5251],     
        'псков'   :  [1158, 'Псковской', 'Псковская область', 30031, 2327], 
        'рост'    :  [1160, 'Ростовской', 'Ростовская область', 30032, 3336], 
        'рязан'   :  [1161, 'Рязанской', 'Рязанская область', 30033, 1312], 
        'самар'   :  [1136, 'Самарской', 'Самарская область', 30034, 5356], 
        'сарат'   :  [1163, 'Саратовской', 'Саратовская область', 30035, 5357], 
        'сахал'   :  [1164, 'Сахалинской', 'Сахалинская область', 30036, 8383], 
        'сверд'   :  [1165, 'Свердловской', 'Свердловская область', 30037, 6360], 
        'смол'    :  [1166, 'Смоленской', 'Смоленская область', 30038, 1313], 
        'тамб'    :  [1168, 'Тамбовской', 'Тамбовская область', 30039, 1314], 
        'твер'    :  [1128, 'Тверской', 'Тверская область', 30040, 1315], 
        'томск'   :  [1169, 'Томской', 'Томская область', 30041, 7376], 
        'туль'    :  [1170, 'Тульской', 'Тульская область', 30042, 1316], 
        'тюм'     :  [1171, 'Тюменской', 'Тюменская область', 30043, 6361], 
        'ульян'   :  [1173, 'Ульяновской', 'Ульяновская область', 30044, 5358], 
        'челяб'   :  [1175, 'Челябинской', 'Челябинская область', 30045, 6362], 
        'ярос'    :  [1178, 'Ярославской', 'Ярославская область', 30046, 1317], 
        'москва'  :  [1145, 'Москве', 'г. Москва', 40001, 1418], 
        'петерб'  :  [141, 'Санкт-Петербурге', 'г. Санкт-Петербург', 40002, 2428], 
        'севаст'  :  [1167, 'Севастополе', 'г. Севастополь', 40003, 3437], 
        'евре'    :  [1199, 'Еврейской автономной области', 'Еврейская автономная область', 50001, 8584], 
        'ямал'    :  [111, 'Ямало-Ненецком', 'Ямало-Ненецкий автономный округ', 60004, 6664], # Ямал должен стоять обязательно перед ЯНАО
        'янао'    :  [111, 'Ямало-Ненецком', 'Ямало-Ненецкий автономный округ', 60004, 6664], 
        'ненец'   :  [172, 'Ненецком', 'Ненецкий автономный округ', 60001, 2629], 
        'хант'    :  [171, 'Ханты-Мансийском', 'Ханты-Мансийский автономный округ', 60002, 6663], 
        'хмао'    :  [171, 'Ханты-Мансийском', 'Ханты-Мансийский автономный округ', 60002, 6663],   
        'чукот'   :  [1177, 'Чукотском', 'Чукотский автономный округ', 60003, 8685], 
        'корякск' :  [1130, 'Корякском', 'Корякский автономный округ', 60005, 8278], 
        'таймыр'  :  [1104, 'Таймырском', 'Таймырский автономный округ', 60008, 7271],
        'эвенк'   :  [1104, 'Эвенкийском', 'Эвенкийский автономный округ', 60010, 7271],     
        'спец'    :  [8888, 'Первое Управление', 'Специальное управление', 80005, 0], 
        'центральный' :  [1, 'Центральный ФО', 'Центральный федеральный округ', 90001, 1000], 
        'запад'   :  [2, 'Северо-Западный ФО', 'Северо-Западный федеральный округ', 90002, 2000], 
        'южный'   :  [3, 'Южный ФО', 'Южный федеральный округ', 90003, 3000], 
        'кавказ'  :  [4, 'Северо-Кавказкий ФО', 'Северо-Кавказкий федеральный округ', 90004, 4000], 
        'приволжский' :  [5, 'Приволжский ФО', 'Приволжский федеральный округ', 90005, 5000], 
        'уральский' :  [6, 'Уральский ФО', 'Уральский федеральный округ', 90006, 6000], 
        'сибирский' :  [7, 'Сибирский ФО', 'Сибирский федеральный округ', 90007, 7000], 
        'дальневосточ' :  [8, 'Дальневосточный ФО', 'Дальневосточный федеральный округ', 90008, 8000], 
        'росси'   :  [10, 'Российская Федерация', 'Российская Федерация', 11000, 100000], 
        'цфо'     :  [1, 'Центральном', 'Центральный федеральный округ', 90001, 1000], 
        'сзфо'    :  [2, 'Северо-Западном', 'Северо-Западный федеральный округ', 90002, 2000], 
        'юфо'     :  [3, 'Южном', 'Южный федеральный округ', 90003, 3000], 
        'скфо'    :  [4, 'Северо-Кавказском', 'Северо-Кавказкий федеральный округ', 90004, 4000], 
        'пфо'     :  [5, 'Приволжском', 'Приволжский федеральный округ', 90005, 5000], 
        'уфо'     :  [6, 'Уральском', 'Уральский федеральный округ', 90006, 6000], 
        'сфо'     :  [7, 'Сибирском', 'Сибирский федеральный округ', 90007, 7000], 
        'двфо'    :  [8, 'Дальневосточном', 'Дальневосточный федеральный округ', 90008, 8000], 
}


def KodRegion(reg, s = 0): # Код региона
    '''Код региона
Параметры функции:
- reg – название субъекта Российской Федерации;
- s – тип возвращаемых данных, необязательный параметр, по умолчанию s=0.
В зависимости от значения параметра s функция вернет следующее:
0 – код региона, используемый в базе STP (ВНИИПО);
1 - краткое название региона для предложений типа "...в Брянской, Белгородской областях";
2 - полное название региона;
3 - статус региона (Республика, край, область, город федерального значения, автономная область, автономный округ);
4 - федеральный округ - индексы для сортировки регионов по федеральным округам.
    '''
    s1 = 'Ошибка!'
    for i in Region.keys():
        if i in reg.lower():
            s1 = i
    if  s1 == 'Ошибка!':
        if s in [0, 3, 4]: s1 = 100001
        return s1    
    else:
        return Region[s1][s]


def RegSort(sp): # Функция выводит сгруппированный список регионов РФ
    '''Функция RegSort на входе получает серию с названиями регионов РФ. С помощью функции KodRegion представляет названия в дательный падеж и группирует по статусу региона – республики, края, области, города федерального значения, Еврейская автономная область, автономные округа.
Статусы регионов и названия в дательном падеже хранятся в словаре Region
    '''
    l_sp = sp.shape[0]
    sp1, sp2 = ['' for _ in range(l_sp)], [0 for _ in range(l_sp)]
    for i in enumerate(sp):
        sp1[i[0]] = KodRegion(i[1], 1)
        sp2[i[0]] = KodRegion(i[1], 3)

    dfR = pd.DataFrame(np.zeros((l_sp, 2)))
    dfR[0], dfR[1] = sp1, sp2
    dfR = dfR.sort_values(1) # сортировка по второму столбцу
    dfR = dfR.reset_index(drop=True) # обновить нумерацию индексов
    dfR[1] = dfR[1] // 10000 # оставить только статус региона
    status = dfR[1].value_counts() # частота статусов регионов
    
    SS = ''
    # Республики <  
    if 1 in status.index:
        SS = 'Республиках '
        if status.loc[1] == 1: SS = 'Республике '
        for i in range(l_sp):
            if dfR[1][i] == 1:
                SS += dfR[0][i] + ', '
        if status.loc[1] > 1: # добавляем союз и перед последним регионом
            SS = SS[0:-2]
            SS = SS[0 : SS.rindex(',')] + ' и' + SS[SS.rindex(',')+1: len(SS)]
            SS += ', '
            
    # Края 
    if 2 in status.index:
        for i in range(l_sp):
            if dfR[1][i] == 2:
                SS += dfR[0][i] + ', '
        SS = SS[0:-2] # срез - убираем лишнюю запятую    
        if status.loc[2] > 1: 
            SS = SS[0 : SS.rindex(',')] + ' и' + SS[SS.rindex(',')+1: len(SS)]
            SS += ' краях, '
        if status.loc[2] == 1: SS += ' крае, '
                 
    # Области 
    if 3 in status.index:
        for i in range(l_sp):
            if dfR[1][i] == 3:
                SS += dfR[0][i] + ', '
        SS = SS[0:-2] # срез - убираем лишнюю запятую    
        if status.loc[3] > 1:
            SS = SS[0 : SS.rindex(',')] + ' и' + SS[SS.rindex(',')+1: len(SS)]
            SS += ' областях, '
        if status.loc[3] == 1: SS += ' области, '
                 
    # Города федерального значения 
    if 4 in status.index:
        for i in range(l_sp):
            if dfR[1][i] == 4:
                SS += dfR[0][i] + ', '

    # Еврейская автономная область 
    if 5 in status.index: SS += 'Еврейской автономной области, '

    # Автономные округа 
    if 6 in status.index:
        for i in range(l_sp):
            if dfR[1][i] == 6:
                 SS += dfR[0][i] + ', '
        SS = SS[0:-2] # срез - убираем лишнюю запятую    
        if status.loc[6] > 1:
            SS = SS[0 : SS.rindex(',')] + ' и' + SS[SS.rindex(',')+1: len(SS)]
            SS += ' автономных округах, '
        if status.loc[6] == 1: SS += ' автономном округе, '
    
    SS = SS[0:-2] # срез - убираем лишнюю запятую в самом конце списка регионов              

    return SS  

Region1 ={
    0 : ['Не указан','Не указан'],
    10 : ['Российская Федерация','Российская Федерация'],
    111 : ['Ненецкий авт. округ','Ненецкий автономный округ'],
    141 : ['г. Санкт-Петербург','г. Санкт-Петербург'],
    171 : ['ХМАО','Ханты-Мансийский автономный округ'],
    172 : ['ЯНАО','Ямало-Ненецкий автономный округ'],
    1101 : ['Алтайский край','Алтайский край'],
    1103 : ['Краснодарский край','Краснодарский край'],
    1104 : ['Красноярский край','Красноярский край'],
    1105 : ['Приморский край','Приморский край'],
    1107 : ['Ставропольский край','Ставропольский край'],
    1108 : ['Хабаровский край','Хабаровский край'],
    1110 : ['Амурская обл.','Амурская область'],
    1111 : ['Архангельская обл.','Архангельская область'],
    1112 : ['Астраханская обл.','Астраханская область'],
    1114 : ['Белгородская обл.','Белгородская область'],
    1115 : ['Брянская обл.','Брянская область'],
    1117 : ['Владимирская обл.','Владимирская область'],
    1118 : ['Волгоградская обл.','Волгоградская область'],
    1119 : ['Вологодская обл.','Вологодская область'],
    1120 : ['Воронежская обл.','Воронежская область'],
    1122 : ['Нижегородская обл.','Нижегородская область'],
    1124 : ['Ивановская обл.','Ивановская область'],
    1125 : ['Иркутская обл.','Иркутская область'],
    1127 : ['Калининградская обл.','Калининградская область'],
    1128 : ['Тверская обл.','Тверская область'],
    1129 : ['Калужская обл.','Калужская область'],
    1130 : ['Камчатский край','Камчатский край'],
    1132 : ['Кемеровская обл.','Кемеровская область'],
    1133 : ['Кировская обл.','Кировская область'],
    1134 : ['Костромская обл.','Костромская область'],
    1136 : ['Самарская обл.','Самарская область'],
    1137 : ['Курганская обл.','Курганская область'],
    1138 : ['Курская обл.','Курская область'],
    1141 : ['Ленинградская обл.','Ленинградская область'],
    1142 : ['Липецкая обл.','Липецкая область'],
    1144 : ['Магаданская обл.','Магаданская область'],
    1145 : ['г. Москва','г. Москва'],
    1146 : ['Московская обл.','Московская область'],
    1147 : ['Мурманская обл.','Мурманская область'],
    1149 : ['Новгородская обл.','Новгородская область'],
    1150 : ['Новосибирская обл.','Новосибирская область'],
    1152 : ['Омская обл.','Омская область'],
    1153 : ['Оренбургская обл.','Оренбургская область'],
    1154 : ['Орловская обл.','Орловская область'],
    1156 : ['Пензенская обл.','Пензенская область'],
    1157 : ['Пермский край','Пермский край'],
    1158 : ['Псковская обл.','Псковская область'],
    1160 : ['Ростовская обл.','Ростовская область'],
    1161 : ['Рязанская обл.','Рязанская область'],
    1162 : ['респ. Крым','Республика Крым'],
    1163 : ['Саратовская обл.','Саратовская область'],
    1164 : ['Сахалинская обл.','Сахалинская область'],
    1165 : ['Свердловская обл.','Свердловская область'],
    1166 : ['Смоленская обл.','Смоленская область'],
    1167 : ['г. Севастополь','г. Севастополь'],
    1168 : ['Тамбовская обл.','Тамбовская область'],
    1169 : ['Томская обл.','Томская область'],
    1170 : ['Тульская обл.','Тульская область'],
    1171 : ['Тюменская обл.','Тюменская область'],
    1173 : ['Ульяновская обл.','Ульяновская область'],
    1174 : ['респ. Ингушетия','Ингушская Республика'],
    1175 : ['Челябинская обл.','Челябинская область'],
    1176 : ['Забайкальский край','Забайкальский край'],
    1177 : ['Чукотский авт. округ','Чукотский автономный округ'],
    1178 : ['Ярославская обл.','Ярославская область'],
    1179 : ['респ. Адыгея','Республика Адыгея'],
    1180 : ['респ. Башкортостан','Республика Башкортостан'],
    1181 : ['респ. Бурятия','Республика Бурятия'],
    1182 : ['респ. Дагестан','Республика Дагестан'],
    1183 : ['КБР','Кабардино-Балкарская Республика'],
    1184 : ['респ. Алтай','Республика Алтай'],
    1185 : ['респ. Калмыкия','Республика Калмыкия'],
    1186 : ['респ. Карелия','Республика Карелия'],
    1187 : ['респ. Коми','Республика Коми'],
    1188 : ['респ. Марий Эл','Республика Марий Эл'],
    1189 : ['респ. Мордовия','Республика Мордовия'],
    1190 : ['респ. Сев.Осетия','Республика Северная Осетия - Алания'],
    1191 : ['КЧР','Карачаево-Черкесская Республика'],
    1192 : ['респ. Татарстан','Республика Татарстан'],
    1193 : ['респ. Тыва','Республика Тыва'],
    1194 : ['респ. Удмуртия','Удмуртская Республика'],
    1195 : ['респ. Хакасия','Республика Хакасия'],
    1196 : ['респ. Чечня','Чеченская Республика'],
    1197 : ['респ. Чувашия','Чувашская Республика'],
    1198 : ['респ. Саха (Якутия)','Республика Саха (Якутия)'],
    1199 : ['Еврейская авт. обл.','Еврейская автономная область'],
    8888 : ['Спец.управление',  'Первое Управление']
}

def RegionName(n, m=0):
    '''
    Функция возвращает название региона России по коду STP2
    m=0 - краткое название (по умолчанию); m=1 - полное название
    '''
    return Region1[n][m] 


def RegionSuperior(d, col, n=3):  # выбор трех лучших регионов
    ''' d - фрейм с кодами регионов stp2 и соответствующими показателями в колонках
        сol - имя колонки с данными
    '''
    d = d.sort_values(by=[col], ascending=False)[:n]
    S = ''
    for key, value in d[col].iteritems():
        if isinstance(key, int):
            S += RegionName(key, 1) + ' - ' + str(value) + '; '
    return S	